from helper_functions import *

#-----------------------FILL IN THE FOLDER WHERE YOUR IMAGE EXISTS--------------------------
datafolder = "E:\\BTH\\DV1614\\Assignments\\Assignment1\\assgn1code\\images\\"
imgpath = datafolder + "6.jpg" 
#----------------------------------------STARTER CODE----------------------------------------
# Convert the color image to grayscale and returns the grayscale pixels 
pixel_values = read_colorimg(imgpath)
# The returned pixel values INCLUDE 2 boundary rows and 2 boundary colns. Therefore,
numb_rows = len(pixel_values) - 2
numb_colns = len(pixel_values[0]) - 2
#
#----------------------------------------WRITE YOUR CODE HERE----------------------------------------
# Create a data structure to store updated pixel information
new_pixel_values = new_pixel_values=[[0]*numb_colns for _ in range(numb_rows)] 
# Define the 3 x 3 mask as a tuple of tuples
mask = [[-1,0,1], [-2,0,2], [-1,0,1]]

# Implement a function to slice a part from the image as a 2D list
def get_slice_2d_list(r,c):
    lis=[[pixel_values[i][j] for j in range(c-1,c+2)] for i in range(r-1,r+2)] 
    return lis

# Implement a function to flatten a 2D list or a 2D tuple
def flatten(lis):
    l=[lis[i][j] for i in range(len(lis)) for j in range(len(lis)) ]
    return l

# For each of the pixel values, excluding the boundary values
    # Create little local 3x3 box using list slicing
for i in range(1,numb_rows+1):
    for j in range(1,numb_colns+1):
        neighbour_pixels = get_slice_2d_list(i,j)
        flat=flatten(neighbour_pixels)
        flatmask=flatten(mask)
        mult_result = list(map(lambda x,y: x * y, flat, flatmask))
        new_pixel_values[i-1][j-1]=sum(mult_result)
    # Sum all the multiplied values and set the new pixel value
#        
#----------------------------------------END YOUR CODE HERE----------------------------------------
# Verify your result
verify_result(pixel_values, new_pixel_values, mask)
# View the original image and the edges of the image
view_images(imgpath, new_pixel_values)